---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: minio-manage
  annotations:
    argocd.argoproj.io/sync-wave: "1"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edit
subjects:
- kind: ServiceAccount
  name: minio-manage
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: minio-manage
  annotations:
    argocd.argoproj.io/sync-wave: "1"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: setup-minio-root-user
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  backoffLimit: 4
  template:
    spec:
      serviceAccount: minio-manage
      serviceAccountName: minio-manage
      containers:
      - name: setup-minio-root-user
        image: image-registry.openshift-image-registry.svc:5000/openshift/tools:latest
        imagePullPolicy: IfNotPresent
        env:
          - name: SECRET_NAME
            value: minio-root-user
        command: ["/bin/bash"]
        args:
        - -ec
        - |-
          # FORCE=true

          if [ -n "$(oc get secret minio-root-user -o name 2>/dev/null)" ]; then
            echo "Secret already exists."
            [ -z ${FORCE+x} ] && exit 0
            echo "Forcing creation."
          fi

          genpass(){
            < /dev/urandom LC_ALL=C tr -dc _A-Z-a-z-0-9 | head -c "${1:-32}"
          }

          id=$(genpass 16)
          secret=$(genpass)

          cat << EOF | oc apply -f-
          apiVersion: v1
          kind: Secret
          metadata:
            name: ${SECRET_NAME}
          type: Opqaue
          stringData:
            MINIO_ROOT_USER: ${id}
            MINIO_ROOT_PASSWORD: ${secret}
          EOF
      restartPolicy: Never
