apiVersion: batch/v1
kind: CronJob
metadata:
  name: etcd-backup
spec:
  # schedule: "* * * * *"
  schedule: "13 */1 * * *"
  successfulJobsHistoryLimit: 3  # Remove after successful completion
  failedJobsHistoryLimit: 3  # Retain failed so that we see it
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          nodeSelector:
            node-role.kubernetes.io/master: ''
          activeDeadlineSeconds: 3000
          restartPolicy: Never
          serviceAccountName: default
          priority: 2000001000
          schedulerName: default-scheduler
          hostNetwork: true
          enableServiceLinks: true
          terminationGracePeriodSeconds: 30
          preemptionPolicy: PreemptLowerPriority
          containers:
            - resources:
                requests:
                  cpu: 10m
                  memory: 80Mi
              name: cluster-backup
              command:
                - /bin/sh
                - '-c'
                - |
                  #!/bin/sh
                  set -euo pipefail

                  # OC_VERSION=$(oc version | sed -n 's/Server Version: //p')
                  BACKUP_TIME=$(date +%Y-%m-%d_%H.%M.%S)
                  BACKUP_INSTANCE=${CLUSTER_BACKUP_PATH:-/tmp}/etcd-backup-${OC_VERSION:-4.x}-${BACKUP_TIME}

                  list_backups(){
                    find /backups -type d -name 'etcd-backup-*' | sort
                  }

                  prune_backups(){
                    LIMIT=${1:-69}  # percent
                    USE=$(df -h /backups | awk 'FNR == 2 {print $5}')

                    while [ "${USE%?}" -gt "${LIMIT}" ]
                    do
                      echo "pruning: more than ${LIMIT}% used"
                      LAST_BACKUP=$(list_backups | head -n 1)

                      [ "${LAST_BACKUP}" == "" ] && break

                      rm -rf "${LAST_BACKUP}"

                      USE=$(df -h /backups | awk 'FNR == 2 {print $5}')
                    done

                    echo "List, Backup(s):"
                    list_backups

                    echo ""
                    df -h /host
                    df -h /backups
                    echo ""
                  }
                  prune_backups

                  echo "Start, Backup:"
                  chroot /host sudo -E /usr/local/bin/cluster-backup.sh ${BACKUP_INSTANCE}
                  gzip -9 /host/${BACKUP_INSTANCE}/*.db

                  mv -v /host${CLUSTER_BACKUP_PATH}/etcd-backup-* /backups || true
              env:
                - name: CLUSTER_BACKUP_PATH
                  value: /home/core/backups
              securityContext:
                privileged: true
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: etcd-backup-local
                  mountPath: /backups
                - name: host
                  mountPath: /host
              terminationMessagePolicy: FallbackToLogsOnError
              # image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:a37e5fcb058911022fbc3e6589c1b7414d746decffb3ba2788249e011190cca1
              image: image-registry.openshift-image-registry.svc:5000/openshift/tools
          serviceAccount: default
          volumes:
            - name: host
              hostPath:
                path: /
                type: ''
            - name: etcd-backup-local
              hostPath:
                path: /home/core/backups
                type: ''
          tolerations:
            - operator: Exists
          priorityClassName: system-node-critical
