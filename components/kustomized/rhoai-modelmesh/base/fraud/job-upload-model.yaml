---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: serving-demo-setup
  annotations:
    argocd.argoproj.io/sync-wave: "1"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: serving-demo-setup
  annotations:
    argocd.argoproj.io/sync-wave: "1"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edit
subjects:
- kind: ServiceAccount
  name: serving-demo-setup
---
apiVersion: batch/v1
kind: Job
metadata:
  name: job-upload-fraud-model
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  backoffLimit: 4
  template:
    spec:
      serviceAccount: serving-demo-setup
      serviceAccountName: serving-demo-setup
      initContainers:
      - name: wait-for-image
        image: image-registry.openshift-image-registry.svc:5000/openshift/tools:latest
        imagePullPolicy: IfNotPresent
        env:
          - name: IMAGE_STREAM
            value: s2i-generic-data-science-notebook
        command: ["/bin/bash"]
        args:
        - -ec
        - |-
          echo -n 'Waiting for RHOAI to deploy ImageStreams'
          while ! oc get -n redhat-ods-applications is ${IMAGE_STREAM} -o name 2>/dev/null; do
            echo -n .
            sleep 5
          done; echo
      containers:
      - name: upload-model
        image: image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/s2i-generic-data-science-notebook:1.2
        imagePullPolicy: IfNotPresent
        env:
          - name: MODEL_URL
            value: https://ai-on-openshift.io/odh-rhoai/img-triton/card.fraud.detection.onnx
          - name: MODEL_NAME
            value: card.fraud.detection.onnx
          - name: BUCKET_PATH
            value: fraud
        command: ["/bin/bash"]
        args:
        - -ec
        - |-
          curl -sL ${MODEL_URL} -o ${MODEL_NAME}
          cat << 'EOF' | python3
          import os, boto3
          filename = os.getenv('MODEL_NAME', 'example.onnx')
          bucket_path = os.getenv('BUCKET_PATH', 'models')
          s3 = boto3.client("s3",
                            endpoint_url = os.getenv("AWS_S3_ENDPOINT"),
                            aws_access_key_id = os.getenv("AWS_ACCESS_KEY_ID"),
                            aws_secret_access_key = os.getenv("AWS_SECRET_ACCESS_KEY"))
          bucket = os.getenv("AWS_S3_BUCKET")
          if bucket not in [bu["Name"] for bu in s3.list_buckets()["Buckets"]]:
            s3.create_bucket(Bucket=bucket)
          with open(filename, "rb") as f:
            s3.upload_fileobj(f, bucket, f'{bucket_path}/{filename}')
          print(f'uploaded: {bucket}/{bucket_path}/{filename}')
          EOF
        envFrom:
        - secretRef:
            name: data-connection-minio
      restartPolicy: Never
