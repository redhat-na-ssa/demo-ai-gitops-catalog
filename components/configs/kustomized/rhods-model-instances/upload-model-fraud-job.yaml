---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: serving-demo-setup
  annotations:
    argocd.argoproj.io/sync-wave: "1"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: serving-demo-setup
  annotations:
    argocd.argoproj.io/sync-wave: "1"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edit
subjects:
- kind: ServiceAccount
  name: serving-demo-setup
---
apiVersion: batch/v1
kind: Job
metadata:
  name: add-model-job
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  backoffLimit: 4
  template:
    spec:
      serviceAccount: serving-demo-setup
      serviceAccountName: serving-demo-setup
      initContainers:
      - name: wait-for-image
        image: image-registry.openshift-image-registry.svc:5000/openshift/tools:latest
        imagePullPolicy: IfNotPresent
        env:
          - name: IMAGE_STREAM
            value: s2i-generic-data-science-notebook
        command: ["/bin/bash"]
        args:
        - -ec
        - |-
          echo -n 'Waiting for RHODS to deploy ImageStreams'
          while ! oc get -n redhat-ods-applications is ${IMAGE_STREAM} -o name 2>/dev/null; do
            echo -n .
            sleep 5
          done; echo
      containers:
      - name: add-model
        image: image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/s2i-generic-data-science-notebook:1.2
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash"]
        args:
        - -ec
        - |-
          curl -sLO https://ai-on-openshift.io/odh-rhods/img-triton/card.fraud.detection.onnx
          cat << 'EOF' | python3
          filename = "card.fraud.detection.onnx"
          import os, boto3
          s3 = boto3.client("s3",
                            endpoint_url=os.getenv("AWS_S3_ENDPOINT"),
                            aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
                            aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"))
          bucket = os.getenv("AWS_S3_BUCKET")
          if bucket not in [bu["Name"] for bu in s3.list_buckets()["Buckets"]]:
            s3.create_bucket(Bucket=bucket)
          with open(filename, "rb") as f:
            s3.upload_fileobj(f, bucket, f'fraud/{filename}')
          print(f'uploaded: {bucket}/fraud/{filename}')
          EOF
        envFrom:
        - secretRef:
            name: data-connection-minio
      restartPolicy: Never
