apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: htpasswd-secret-ss-job
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - update
      - patch
  - apiGroups:
      - bitnami.com
    resources:
      - sealedsecrets
    verbs:
      - get
      - list
      - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: htpasswd-secret-ss-job
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: htpasswd-secret-ss-job
subjects:
  - kind: ServiceAccount
    name: htpasswd-secret-ss-job
    namespace: openshift-config
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: htpasswd-secret-ss-job
---
apiVersion: batch/v1
kind: Job
metadata:
  generateName: htpasswd-secret-ss-job-
  name: htpasswd-secret-ss-job
  annotations:
    argocd.argoproj.io/hook: Sync
    # argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      containers:
        - image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
          env:
            - name: OBJECT
              value: htpasswd-secret
            - name: NS
              value: openshift-config
          command:
            - /bin/bash
            - -c
            - |
              #!/usr/bin/env bash
              set -x
              # annotate secret
              if oc -n ${NS} get secret ${OBJECT}; then
                oc -n ${NS} \
                  annotate secret \
                  --overwrite=true \
                  ${OBJECT} sealedsecrets.bitnami.com/managed="true"
                # check for sealed secret
                if oc -n ${NS} get sealedsecret ${OBJECT}; then
                  # check sync on sealed secret
                  SYNCED=$(oc -n ${NS} \
                    get sealedsecret ${OBJECT} \
                    --no-headers \
                    -o custom-columns="NAME:.status.conditions[0].status") || true
                  # delete sealed secret if in error
                  echo "${SYNCED}" | grep -qi "False" && \
                    oc -n ${NS} \
                      delete sealedsecret ${OBJECT} || echo SYNCED: True
                fi
              else
                echo "secret ${OBJECT} not in ${NS}"
              fi
          name: htpasswd-secret-ss-job
      restartPolicy: Never
      terminationGracePeriodSeconds: 30
      serviceAccount: htpasswd-secret-ss-job
      serviceAccountName: htpasswd-secret-ss-job
