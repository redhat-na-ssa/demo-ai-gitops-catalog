apiVersion: v1
kind: Secret
metadata:
  name: digital-rain
  namespace: openshift-config
type: Opaque
stringData:
  login.html: |
    <!DOCTYPE html>
    <!--

    This template can be modified and used to customize the login page. To replace
    the login page, set master configuration option oauthConfig.templates.login to
    the path of the template file. Don't remove parameters in curly braces below.

    oauthConfig:
      templates:
        login: templates/login-template.html

    -->
    <html>
      <head>
        <title>Login</title>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css">
        <style type="text/css">
          body {
            font-family: "Open Sans", Helvetica, Arial, sans-serif;
            font-size: 14px;
            margin: 15px;
            width: 100vw;
            height: 100vh;
            padding: 0;
            margin: 0;
            overflow: hidden;
          }

          input {
            border: solid 1px;
            border-color: #dedede;
            padding: 0.5em;
            margin: 0.5em 0 1em;
            width: 98%;
            border-bottom-color: #333;
          }
          form h2 {
            text-align: left;
            padding-bottom: 1em;
          }
          .error {
            color: red;
            margin-bottom: 10px;
          }
          .label-container {
            text-align: left;
          }
          #rain-container {
            top: 0;
            position: absolute;
            width: 100vw;
            height: 100vh;
            z-index: -1;
          }
          form {
            text-align: center;
            margin: 0 auto;
            width: 20vw;
            margin-top: 15vh;
            padding: 5rem;
            background: #fafafa;
            border-radius: 1em;
          }
          label {
            font-size: 10pt;
            color: #222;
          }
          button {
            padding: 0.5em;
            width: 90%;
            background: red;
            color: #fafafa;
            border-radius: 0.2em;
            font-size: 12pt;
            border: 0;
            margin-top: 2em;
          }
        </style>
      </head>
      <body>
        <div id="rain-container"></div>

        {{ if .Error }}
          <div class="error">{{ .Error }}</div>
          <!-- Error code: {{ .ErrorCode }} -->
        {{ end }}

        <!-- Identity provider name: {{ .ProviderName }} -->
        <form action="{{ .Action }}" method="POST">
          <h2>Log in to your account</h2>

          <input type="hidden" name="{{ .Names.Then }}" value="{{ .Values.Then }}">
          <input type="hidden" name="{{ .Names.CSRF }}" value="{{ .Values.CSRF }}">

          <div class="label-container">
            <label for="inputUsername">Username</label>
          </div>
          <div>
            <input type="text" id="inputUsername" autofocus="autofocus" type="text" name="{{ .Names.Username }}" value="{{ .Values.Username }}">
          </div>

          <div class="label-container">
            <label for="inputPassword">Password</label>
          </div>
          <div>
            <input type="password" id="inputPassword" type="password" name="{{ .Names.Password }}" value="">
          </div>

          <button type="submit">Log in</button>

        </form>
        <script>
          (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
          "use strict";
          Object.defineProperty(exports, "__esModule", { value: true });
          exports.Character = void 0;
          var PROBABILITIES = {
              // Characters can change to another character. It shouldn't happen too often.
              CHAR_SHIFT: 0.925,
          };
          // Some characters are more opaque than others
          var opacities = {
              0: 0,
              1: 0.1,
              2: 0.2,
              3: 0.275,
              4: 0.475,
              5: 0.55,
              6: 0.65,
              7: 1,
          };
          var defaultVisibility = Number(Object.keys(opacities).pop());
          var OGHAM = [
              ' ',
              'ᚁ',
              'ᚂ',
              'ᚃ',
              'ᚄ',
              'ᚅ',
              'ᚆ',
              'ᚇ',
              'ᚈ',
              'ᚉ',
              'ᚊ',
              'ᚋ',
              'ᚌ',
              'ᚎ',
              'ᚏ',
              'ᚐ',
              'ᚑ',
              'ᚒ',
              'ᚓ',
              'ᚔ',
              'ᚚ',
              'ᚕ',
              'ᚖ',
              'ᚗ',
              'ᚍ',
              'ᚘ',
              '᚛',
              '᚜',
          ];
          var CLASSIC = 'アァカサタナハマヤャラワガザダバパイィキシチニヒミリヰギジヂビピウゥクスツヌフムユュルグズブヅプエェケセテネヘメレヱゲゼデベペオォコソトノホモヨョロヲゴゾドボポヴッン'.split('');
          var Character = /** @class */ (function () {
              function Character(style, visibility) {
                  if (visibility === void 0) { visibility = defaultVisibility; }
                  this.style = style;
                  this.visibility = visibility;
                  this.character = this.getRandomCharacter();
                  this.visibility = visibility;
              }
              Character.prototype.reduceVisibility = function () {
                  if (this.visibility > 0) {
                      this.visibility--;
                  }
              };
              Character.prototype.increaseVisibility = function () {
                  this.visibility++;
              };
              Character.prototype.isVisible = function () {
                  return this.getOpacity() !== 0;
              };
              Character.prototype.getOpacity = function () {
                  return opacities[this.visibility];
              };
              Character.prototype.update = function () {
                  // Character can change to another character randomly
                  if (Math.random() >= PROBABILITIES.CHAR_SHIFT) {
                      this.character = this.getRandomCharacter();
                  }
                  if (this.getOpacity() === 1) {
                      this.visibility = Math.max(4, Math.floor(Math.random() * Object.keys(opacities).length));
                  }
              };
              Character.prototype.getRandomCharacter = function () {
                  var chars = this.style === 'classic' ? CLASSIC : OGHAM;
                  return chars[Math.floor(Math.random() * OGHAM.length)];
              };
              return Character;
          }());
          exports.Character = Character;

          },{}],2:[function(require,module,exports){
          "use strict";
          Object.defineProperty(exports, "__esModule", { value: true });
          exports.Column = void 0;
          var character_1 = require("./character");
          // Use a higher minimum char count in portrait orientation to fill the screen
          var MIN_CHARS_LEN = window.innerHeight > window.innerWidth ? 8 : 5;
          // Columns should print at least 5 characters per second, and 30 at most
          var MIN_CHARS_SEC = 5;
          var MAX_CHARS_SEC = 25;
          var Column = /** @class */ (function () {
              function Column(colHeight, style) {
                  this.colHeight = colHeight;
                  this.style = style;
                  this.characters = [];
                  this.falling = this.getRandomFallingValue();
                  this.charsPerSec = this.getRandomPrintRate();
                  this.length = this.getRandomLength();
                  // Set last update to a time between 0 and 5 seconds in
                  // the future to stagger initial columns rendering
                  this.lastUpdate = Date.now() + Math.max(500, Math.random() * 5000);
              }
              Column.prototype.update = function () {
                  var _a;
                  var t = Date.now();
                  if (this.lastUpdate > t || t - this.lastUpdate < 1000 / this.charsPerSec) {
                      // Do not allow updating at a rate of more than charsPerSec
                      return;
                  }
                  if (this.falling) {
                      // Some columns print and drop at the same time. This can be simulated
                      // by prepending already hidden characters to the array
                      this.characters.unshift(new character_1.Character(this.style, 0));
                  }
                  if (this.characters.length === 0) {
                      // First update. Insert the initial character
                      this.characters.push(new character_1.Character(this.style));
                  }
                  else if (((_a = this.characters[this.colHeight + 1]) === null || _a === void 0 ? void 0 : _a.isVisible()) === false) {
                      // If an offscreen character is not visible the column restarts printing
                      this.reset();
                  }
                  else {
                      // The tail index is necessary to know when older tail characters being
                      // to fade out by calling reduceVisibility
                      var tailIdx = this.characters.length - this.length;
                      for (var i = 0; i < this.characters.length; i++) {
                          var c = this.characters[i];
                          c.update();
                          if (i <= tailIdx) {
                              c.reduceVisibility();
                          }
                      }
                      this.characters.push(new character_1.Character(this.style));
                  }
                  this.lastUpdate = Date.now();
              };
              Column.prototype.reset = function () {
                  this.falling = this.getRandomFallingValue();
                  this.charsPerSec = this.getRandomPrintRate();
                  this.length = this.getRandomLength();
                  // Reset the characters to an empty array
                  this.characters = [];
              };
              Column.prototype.getRandomLength = function () {
                  return Math.max(MIN_CHARS_LEN, Math.round(Math.random() * (this.colHeight * 1.4)));
              };
              Column.prototype.getRandomPrintRate = function () {
                  return Math.max(MIN_CHARS_SEC, Math.round(Math.random() * MAX_CHARS_SEC));
              };
              Column.prototype.getRandomFallingValue = function () {
                  return Math.random() >= 0.96;
              };
              return Column;
          }());
          exports.Column = Column;

          },{"./character":1}],3:[function(require,module,exports){
          "use strict";
          Object.defineProperty(exports, "__esModule", { value: true });
          var column_1 = require("./column");
          var defaultRainColour = {
              r: 0,
              g: 255,
              b: 0
          };
          var defaultBgColour = '#0F1215';
          function init(params) {
              var _a = params.bgColour, bgColour = _a === void 0 ? defaultBgColour : _a, _b = params.rainColour, rainColour = _b === void 0 ? defaultRainColour : _b, container = params.container, _c = params.style, style = _c === void 0 ? 'classic' : _c;
              var canvas = document.createElement('canvas');
              var dt = Date.now();
              if (!canvas) {
                  throw new Error('no canvas element found!');
              }
              var ctx = canvas.getContext('2d');
              if (!ctx) {
                  throw new Error('no 2d context available!');
              }
              var nw = document.createElement('div');
              nw.id = 'noise-wrap';
              // Insert canvas into the DOM and have it occupy the full window dimensions
              container.prepend(nw);
              nw.appendChild(canvas);
              setTimeout(function () {
                  window.grained('#noise-wrap', {
                      animate: true,
                      patternWidth: 300,
                      patternHeight: 300,
                      grainOpacity: 0.0175,
                      grainDensity: 0.65,
                      grainWidth: 1.3,
                      grainHeight: 2
                  });
              });
              canvas.height = window.innerHeight;
              canvas.width = window.innerWidth;
              var DPR = window.devicePixelRatio || 1;
              // Font size of 56 on regular monitors, e.g 1080/1440p is a tad large
              var FONT_SIZE = DPR !== 1 ? 60 / DPR : 38;
              var H_PAD = FONT_SIZE * 0.25;
              var COLUMN_WIDTH = FONT_SIZE + H_PAD;
              var COLUMN_COUNT = Math.ceil(canvas.width / COLUMN_WIDTH);
              var COLUMN_CHARS_HEIGHT = Math.ceil(canvas.height / FONT_SIZE);
              // Scaling for high DPI devices
              var rect = canvas.getBoundingClientRect();
              canvas.width = rect.width * DPR;
              canvas.height = rect.height * DPR;
              canvas.style.width = rect.width + 'px';
              canvas.style.height = rect.height + 'px';
              ctx.scale(DPR, DPR);
              var cols = [];
              for (var i = 0; i < COLUMN_COUNT; i++) {
                  cols.push(new column_1.Column(COLUMN_CHARS_HEIGHT, style));
              }
              function render(ctx) {
                  for (var i = 0; i < COLUMN_COUNT; i++) {
                      var col = cols[i];
                      // Column update function updates characters within
                      col.update();
                      // Blank out the entire column bounding box with the bg colour
                      var colStartX = i * COLUMN_WIDTH;
                      var colEndX = colStartX + COLUMN_WIDTH;
                      ctx.fillStyle = bgColour;
                      ctx.fillRect(colStartX, 0, colEndX, canvas.height);
                      // All font rendering uses the same parameters so set them
                      // just once, prior to looping and drawing each character
                      ctx.font = params.style === 'ogham' ? "bold " + FONT_SIZE + "px BabelStone Ogham" : FONT_SIZE + "px sans-serif";
                      ctx.textAlign = 'center';
                      ctx.textBaseline = 'bottom';
                      for (var j = 0; j < col.characters.length; j++) {
                          var c = col.characters[j];
                          var opacity = c.getOpacity();
                          if (opacity === 1) {
                              ctx.fillStyle = "rgb(" + rainColour.r + ", " + rainColour.g + ", " + rainColour.b + ")";
                          }
                          else if (opacity >= 0.6) {
                              ctx.fillStyle = "rgba(" + rainColour.r + ", " + rainColour.g + ", " + rainColour.b + ", " + opacity + ")";
                          }
                          else {
                              ctx.fillStyle = "rgba(" + rainColour.r + ", " + rainColour.g + ", " + rainColour.b + ", " + opacity + ")";
                          }
                          // Rotate, since vertical alignment is most appropriate for ogham
                          ctx.save();
                          ctx.translate(i * COLUMN_WIDTH + FONT_SIZE / 2, j * FONT_SIZE * 0.975);
                          // ctx.rotate(-Math.PI / 2);
                          ctx.fillText(c.character, 0, FONT_SIZE / 2);
                          ctx.restore();
                      }
                  }
                  dispatchRender(ctx);
              }
              function dispatchRender(ctx) {
                  var now = Date.now();
                  // Don't render at more than 25fps. Think of the environment, and battery
                  // life, and that this is a meaningless gimmick website, etc!
                  if (now - dt >= 1000 / 25) {
                      requestAnimationFrame(function () {
                          if (!ctx)
                              throw new Error('no 2d context available!');
                          render(ctx);
                          dt = now;
                      });
                  }
                  else {
                      requestAnimationFrame(function () { return dispatchRender(ctx); });
                  }
              }
              dispatchRender(ctx);
          }
          window.digitalrain = { init: init };

          },{"./column":2}]},{},[3]);
          /*! Grained.js
          * Author : Sarath Saleem  - https://github.com/sarathsaleem
          * MIT license: http://opensource.org/licenses/MIT
          * GitHub : https://github.com/sarathsaleem/grained
          * v0.0.1
          */
          !function(a,b){"use strict";function c(a,c){function d(a,b,c,d){var e="";e=b.length?b+"{"+c+"}":c,"insertRule"in a?a.insertRule(e,d):"addRule"in a&&a.addRule(b,c,d)}var e=null,f=null,g=null;if("string"==typeof a&&(e=b.getElementById(a.split("#")[1])),!e)return void console.error("Grained: cannot find the element with id "+a);f=e.id,"absolute"!==e.style.position&&(e.style.position="relative"),e.style.overflow="hidden";var h=["","-moz-","-o-animation-","-webkit-","-ms-"],i={animate:!0,patternWidth:100,patternHeight:100,grainOpacity:.1,grainDensity:1,grainWidth:1,grainHeight:1,grainChaos:.5,grainSpeed:20};Object.keys(c).forEach(function(a){i[a]=c[a]});for(var j=function(){var a=b.createElement("canvas"),c=a.getContext("2d");a.width=i.patternWidth,a.height=i.patternHeight;for(var d=0;d<i.patternWidth;d+=i.grainDensity)for(var e=0;e<i.patternHeight;e+=i.grainDensity){var f=256*Math.random()|0;c.fillStyle="rgba("+[f,f,f,i.grainOpacity].join()+")",c.fillRect(d,e,i.grainWidth,i.grainHeight)}return a.toDataURL("image/png")},k=j(),l="",m=["0%:-10%,10%","10%:-25%,0%","20%:-30%,10%","30%:-30%,30%","40%::-20%,20%","50%:-15%,10%","60%:-20%,20%","70%:-5%,20%","80%:-25%,5%","90%:-30%,25%","100%:-10%,10%"],n=h.length;n--;){l+="@"+h[n]+"keyframes grained{";for(var o=0;o<m.length;o++){var p=m[o].split(":");l+=p[0]+"{",l+=h[n]+"transform:translate("+p[1]+");",l+="}"}l+="}"}var q=b.getElementById("grained-animation");q&&q.parentElement.removeChild(q);var r=b.createElement("style");r.type="text/css",r.id="grained-animation",r.innerHTML=l,b.body.appendChild(r);var s=b.getElementById("grained-animation-"+f);s&&s.parentElement.removeChild(s),r=b.createElement("style"),r.type="text/css",r.id="grained-animation-"+f,b.body.appendChild(r);var t="background-image: url("+k+");";if(t+='position: absolute;content: "";height: 300%;width: 300%;left: -100%;top: -100%;',n=h.length,i.animate)for(;n--;)t+=h[n]+"animation-name:grained;",t+=h[n]+"animation-iteration-count: infinite;",t+=h[n]+"animation-duration: "+i.grainChaos+"s;",t+=h[n]+"animation-timing-function: steps("+i.grainSpeed+", end);";g="#"+f+"::before",d(r.sheet,g,t)}a.grained=c}(window,document);
        </script>
        <script>
          window.digitalrain.init({
            container: document.getElementById('rain-container'),
            rainColour: {
              r: 220,
              g: 50,
              b: 30
            }
          })
        </script>
      </body>
    </html>